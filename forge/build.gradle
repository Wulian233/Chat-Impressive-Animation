architectury {
    platformSetupLoomIde()
    forge()
}

project.archivesBaseName = rootProject.archivesBaseName + "-forge"

loom {
	forge {
		mixinConfigs("chatimpressiveanimation.mixins.json", "chatimpressiveanimation.forge.mixins.json")
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
	modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.clothconfig_version}"

    // only forge, because fabric & neoforge include mixinextras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowBundle(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

loom {
    forge {
        mixinConfigs = [
                "chatimpressiveanimation.mixins.json"
        ]
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

	configurations = [project.configurations.shadowBundle]
    archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
