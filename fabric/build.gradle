architectury {
    platformSetupLoomIde()
    fabric()
}

project.archivesBaseName = rootProject.archivesBaseName + "-fabric"

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://maven.nucleoid.xyz/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowBundle(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

	modApi "me.shedaniel.cloth:cloth-config-fabric:${rootProject.clothconfig_version}"
	modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
	modApi "eu.pb4:placeholder-api:${rootProject.placeholder_api_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

	configurations = [project.configurations.shadowBundle]
    archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
